[["0",{"pageContent":"APP_ENV=dev\nGOOGLE_CALENDAR_PUBLIC_URL = \"\"","metadata":{"source":".env.example"}}],["1",{"pageContent":".DS_Store\nvendor\n.env\n.vercel","metadata":{"source":".gitignore"}}],["2",{"pageContent":"/vendor","metadata":{"source":".vercelignore"}}],["3",{"pageContent":"# API REST Artesana\n\nEmpezamos por un `switch` y acabamos generando un pequeño framework reutilizable.\n\nEste es el código del curso **Crea una API REST artesana con PHP** https://premium.danielprimo.io/cursos/crea-una-api-rest-artesana-con-php\n\n## Tecnología\n\nTecnología para resolverlo:\n- PHP\n- Composer\n- Postman\n- Mucho cariño y algo de tiempo\n\n## Características\n\nInicialmente la API REST debe cumplir estos requisitos:\n\n- Gestionar gastos (*expenses*)\n- CRUD sobre los gastos: Create, Read, Update, Delete\n- Gestionar las peticiones del cliente con GET, POST, PUT y DELETE y dar la respuesta\n- Se utiliza JSON para el formato de la API REST\n- No necesitamos persistencia. No necesitamos autenticación.\n\n## Instalación en local","metadata":{"source":"README.md"}}],["4",{"pageContent":"## Instalación en local\n\n1. Descarga el repositorio\n2. Copia `.env.example` en `.env`y modifica el parámetro de la URL del calendario de Google ([Cómo se hace](https://support.google.com/calendar/answer/37648?hl=es#zippy=%2Cver-tu-calendario-solo-lectura))\n3. Ejecuta `composer dump-autoload -o` para cargar \n4. Ejecuta `php -S localhost:8080 -t api/index.php` para lanzar el servidor local\n5. Opciona: Lanza `vercel` para comenzar el despliegue en la nube\n\n## Aviso a navegantes\n\nEl código está basado fuertemente en https://gist.github.com/seebz/c00a38d9520e035a6a8c","metadata":{"source":"README.md"}}],["5",{"pageContent":"<?php \nrequire __DIR__ . '/../public/index.php';","metadata":{"source":"api/index.php"}}],["6",{"pageContent":"{\n    \"name\": \"daniel/calendar-events-api\",\n    \"authors\": [\n        {\n            \"name\": \"Daniel Primo\",\n            \"email\": \"delineas@gmail.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\"Src\\\\\": \"src/\"}\n    },\n    \"require\": {\n        \"vlucas/phpdotenv\": \"^5.3\"\n    }\n}","metadata":{"source":"composer.json"}}],["7",{"pageContent":"<?php\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\nuse Src\\Core\\Router;\nuse Src\\Core\\Response;\nuse Src\\Core\\Container;\nuse Src\\App\\CalendarClient;\nuse Src\\App\\CalendarController;\nuse Src\\Core\\ExceptionHandler;\n\ndate_default_timezone_set('Europe/Madrid');\n\n$response = new Response;\nnew ExceptionHandler($response);\n\nfunction is_local()\n{\n    if (\n        strpos($_SERVER['HTTP_HOST'], 'localhost') !== false\n        || substr($_SERVER['HTTP_HOST'], 0, 3) == '10.'\n        || substr($_SERVER['HTTP_HOST'], 0, 7) == '192.168'\n    ) return true;\n    return false;\n}\n\nif(is_local()) {\n    $dotenv = Dotenv\\Dotenv::createImmutable(__DIR__ . '/../');\n    $dotenv->load();\n}\n\nContainer::add('response', $response);\nContainer::add('calendarClient', (new CalendarClient)());\n\n$router = new Router;\n\n/*\nGET /expenses\nGET /expenses/{id}\nPOST /expenses\nPUT /expenses/{id}\nDELETE /expenses/{id}\n*/","metadata":{"source":"public/index.php"}}],["8",{"pageContent":"$router = new Router;\n\n/*\nGET /expenses\nGET /expenses/{id}\nPOST /expenses\nPUT /expenses/{id}\nDELETE /expenses/{id}\n*/\n\n$router->get(\n    '/api/next-event',\n    [CalendarController::class, 'nextEvent']\n);\n$router->get(\n    '/api/events-since/([0-9\\-]+)',\n    [CalendarController::class, 'eventsByDateSince']\n);\n$router->get(\n    '/api/next-events',\n    [CalendarController::class, 'eventsFuture']\n);\n\n// $router->get(\n//     '/expenses/([0-9]+)',\n//     [ExpenseController::class, 'getBy']\n// );\n\n// $router->post(\n//     '/expenses',\n//     [ExpenseController::class, 'store']\n// );\n\n// $router->put(\n//     '/expenses/([0-9]+)',\n//     [ExpenseController::class, 'update']\n// );\n\n// $router->delete(\n//     '/expenses/([0-9]+)',\n//     [ExpenseController::class, 'remove']\n// );\n\n$router->run();","metadata":{"source":"public/index.php"}}],["9",{"pageContent":"<?php\n\nnamespace Src\\App;\n\nclass CalendarClient {\n\n    public function __invoke()\n    {\n        return new ICal($_ENV['GOOGLE_CALENDAR_PUBLIC_URL']);\n    }\n\n}","metadata":{"source":"src/App/CalendarClient.php"}}],["10",{"pageContent":"<?php\n\nnamespace Src\\App;\n\nuse Src\\Core\\Request;\nuse Src\\App\\EventResource;\nuse Src\\Core\\Container;\n\nclass CalendarController\n{\n    public function __construct()\n    {\n        $this->response = Container::get('response');\n        $this->calendarClient = Container::get('calendarClient');\n    }\n\n    public function nextEvent()\n    {\n        $events = $this->calendarClient->eventsByDateSince('today');\n        $nextEvent = (count($events) > 0) ? current($events) : null;\n        return is_null($nextEvent) \n            ? $this->response->sendError('not found', 404) \n            : $this->response->sendMessage(EventResource::toArray($nextEvent[0]));\n    }","metadata":{"source":"src/App/CalendarController.php"}}],["11",{"pageContent":"public function eventsByDateSince($date)\n    {\n        $events = $this->calendarClient->eventsByDateSince((string)$date);\n        return (count($events) < 1) \n            ? $this->response->sendError('not found', 404) \n            : $this->response->sendMessage(\n                array_map(function($event) {\n                    return EventResource::toArray($event[0]);\n                }, $events)\n            );\n    }\n\n    public function eventsFuture()\n    {\n        $date = date('Y-m-d');\n        $events = $this->calendarClient->eventsByDateSince((string)$date);\n        return (count($events) < 1)\n            ? $this->response->sendError('not found', 404)\n            : $this->response->sendMessage(\n                array_map(function ($event) {\n                    return EventResource::toArray($event[0]);\n                }, $events)\n            );\n    }\n}","metadata":{"source":"src/App/CalendarController.php"}}],["12",{"pageContent":"<?php \n\nnamespace Src\\App;\n\nclass EventResource\n{\n    public static function toArray($event)\n    {\n        return [\n            'summary' => stripslashes($event->summary),\n            'description' => '', //$event->description,\n            'start' => $event->dateStartTZ\n        ];\n      }\n}","metadata":{"source":"src/App/EventResource.php"}}],["13",{"pageContent":"<?php\n\n// Copy from https://gist.github.com/seebz/c00a38d9520e035a6a8c\n\nnamespace Src\\App;\n\nclass ICal\n{\n  /**\n   * @var string\n   */\n  public $title;\n\n  /**\n   * @var string\n   */\n  public $description;\n\n  /**\n   * @var array\n   */\n  public $events = array();\n\n  /**\n   * @var array\n   */\n  protected $_eventsByDate;\n\n\n  public function __construct($content = null)\n  {\n    if ($content) {\n      $isUrl  = strpos($content, 'http') === 0 && filter_var($content, FILTER_VALIDATE_URL);\n      $isFile = strpos($content, \"\\n\") === false && file_exists($content);\n      if ($isUrl || $isFile) {\n        $content = file_get_contents($content);\n      }\n      $this->parse($content);\n    }\n  }\n\n\n  public function title()\n  {\n    return $this->summary;\n  }\n\n  public function description()\n  {\n    return $this->description;\n  }\n\n  public function events()\n  {\n    return $this->events;\n  }\n\n  public function eventsByDate()\n  {\n    if (!$this->_eventsByDate) {\n      $this->_eventsByDate = array();","metadata":{"source":"src/App/ICal.php"}}],["14",{"pageContent":"public function events()\n  {\n    return $this->events;\n  }\n\n  public function eventsByDate()\n  {\n    if (!$this->_eventsByDate) {\n      $this->_eventsByDate = array();\n\n      foreach ($this->events() as $event) {\n        foreach ($event->occurrences() as $occurrence) {\n          $date = $occurrence->format('Y-m-d');\n          $this->_eventsByDate[$date][] = $event;\n        }\n      }\n      ksort($this->_eventsByDate);\n    }\n\n    return $this->_eventsByDate;\n  }\n\n  public function eventsByDateBetween($start, $end)\n  {\n    if ((string) (int) $start !== (string) $start) {\n      $start = strtotime($start);\n    }\n    $start = date('Y-m-d', $start);\n\n    if ((string) (int) $end !== (string) $end) {\n      $end = strtotime($end);\n    }\n    $end = date('Y-m-d', $end);\n\n    $return = array();\n    foreach ($this->eventsByDate() as $date => $events) {\n      if ($start <= $date && $date < $end) {\n        $return[$date] = $events;\n      }\n    }\n\n    return $return;\n  }","metadata":{"source":"src/App/ICal.php"}}],["15",{"pageContent":"$return = array();\n    foreach ($this->eventsByDate() as $date => $events) {\n      if ($start <= $date && $date < $end) {\n        $return[$date] = $events;\n      }\n    }\n\n    return $return;\n  }\n\n  public function eventsByDateSince($start)\n  {\n    if ((string) (int) $start !== (string) $start) {\n      $start = strtotime($start);\n    }\n    $start = date('Y-m-d', $start);\n\n    $return = array();\n    foreach ($this->eventsByDate() as $date => $events) {\n      if ($start <= $date) {\n        $return[$date] = $events;\n      }\n    }\n\n    return $return;\n  }\n\n  public function parse($content)\n  {\n    $content = str_replace(\"\\r\\n \", '', $content);\n\n    // Title\n    preg_match('`^X-WR-CALNAME:(.*)$`m', $content, $m);\n    $this->title = $m ? trim($m[1]) : null;\n\n    // Description\n    preg_match('`^X-WR-CALDESC:(.*)$`m', $content, $m);\n    $this->description = $m ? trim($m[1]) : null;","metadata":{"source":"src/App/ICal.php"}}],["16",{"pageContent":"// Description\n    preg_match('`^X-WR-CALDESC:(.*)$`m', $content, $m);\n    $this->description = $m ? trim($m[1]) : null;\n\n    // Events\n    preg_match_all('`BEGIN:VEVENT(.+)END:VEVENT`Us', $content, $m);\n    foreach ($m[0] as $c) {\n      $this->events[] = new ICalEvent($c);\n    }\n\n    return $this;\n  }\n}","metadata":{"source":"src/App/ICal.php"}}],["17",{"pageContent":"<?php\n\n// Copy from https://gist.github.com/seebz/c00a38d9520e035a6a8c\n\nnamespace Src\\App;\n\nclass ICalEvent\n{\n  /**\n   * @var string\n   */\n  public $uid;\n\n  /**\n   * @var string\n   */\n  public $summary;\n\n  /**\n   * @var string\n   */\n  public $description;\n\n  /**\n   * @var string\n   */\n  public $dateStart;\n\n  /**\n   * @var string\n   */\n  public $dateStartTZ;\n\n  /**\n   * @var string\n   */\n  public $dateEnd;\n\n  /**\n   * @var array\n   */\n  public $exdate = array();\n\n  /**\n   * @var stdClass\n   */\n  public $recurrence;\n\n  /**\n   * @var string\n   */\n  public $location;\n\n  /**\n   * @var string\n   */\n  public $status;\n\n  /**\n   * @var string\n   */\n  public $created;\n\n  /**\n   * @var string\n   */\n  public $updated;\n\n  /**\n   * @var string\n   */\n  public $timezone;\n\n  /**\n   * @var integer\n   */\n  protected $_timeStart;\n\n  /**\n   * @var integer\n   */\n  protected $_timeEnd;\n\n  /**\n   * @var array\n   */\n  protected $_occurrences;","metadata":{"source":"src/App/ICalEvent.php"}}],["18",{"pageContent":"/**\n   * @var integer\n   */\n  protected $_timeStart;\n\n  /**\n   * @var integer\n   */\n  protected $_timeEnd;\n\n  /**\n   * @var array\n   */\n  protected $_occurrences;\n\n\n  public function __construct($content = null, $timezone = 'Europe/Madrid')\n  {\n    $this->timezone = $timezone;\n    if ($content) {\n      $this->parse($content);\n    }\n  }\n\n\n  public function summary()\n  {\n    return $this->summary;\n  }\n\n  public function title()\n  {\n    return $this->summary;\n  }\n\n  public function description()\n  {\n    return $this->description;\n  }\n\n  public function occurrences()\n  {\n    if (empty($this->_occurrences)) {\n      $this->_occurrences = $this->_calculateOccurrences();\n    }\n    return $this->_occurrences;\n  }\n\n  public function duration()\n  {\n    if ($this->_timeEnd) {\n      return $this->_timeEnd - $this->_timeStart;\n    }\n  }\n\n  public function parse($content)\n  {\n    $content = str_replace(\"\\r\\n \", '', $content);\n\n    // UID\n    if (preg_match('`^UID:(.*)$`m', $content, $m))\n      $this->uid = trim($m[1]);","metadata":{"source":"src/App/ICalEvent.php"}}],["19",{"pageContent":"public function parse($content)\n  {\n    $content = str_replace(\"\\r\\n \", '', $content);\n\n    // UID\n    if (preg_match('`^UID:(.*)$`m', $content, $m))\n      $this->uid = trim($m[1]);\n\n    // Summary\n    if (preg_match('`^SUMMARY:(.*)$`m', $content, $m))\n      $this->summary = trim($m[1]);\n\n    // Description\n    if (preg_match('`^DESCRIPTION:(.*)$`m', $content, $m))\n      $this->description = trim($m[1]);\n\n    // Date start\n    if (preg_match('`^DTSTART(?:;.+)?:([0-9]+(T[0-9]+Z?)?)`m', $content, $m)) {\n      $this->_timeStart = strtotime($m[1]);\n      $this->dateStart  = date('Y-m-d H:i:s', $this->_timeStart);\n    }\n\n    // Date start with timezone\n    if (isset($this->dateStart)) {\n      $datetime = new \\DateTime(\"now\", new \\DateTimeZone($this->timezone));\n      $datetime->setTimestamp(strtotime($this->dateStart));\n      $this->dateStartTZ  =  $datetime->format('d-m-Y H:i:s');\n    }","metadata":{"source":"src/App/ICalEvent.php"}}],["20",{"pageContent":"// Date end\n    if (preg_match('`^DTEND(?:;.+)?:([0-9]+(T[0-9]+Z?)?)`m', $content, $m)) {\n      $this->_timeEnd = strtotime($m[1]);\n      $this->dateEnd  = date('Y-m-d H:i:s', $this->_timeEnd);\n    }\n\n    // Exdate\n    if (preg_match_all('`^EXDATE(;.+)?:([0-9]+(T[0-9]+Z?)?)`m', $content, $m)) {\n      foreach ($m[2] as $dates) {\n        $dates = explode(',', $dates);\n        foreach ($dates as $d) {\n          $this->exdate[] = date('Y-m-d', strtotime($d));\n        }\n      }\n    }\n\n\n    // Recurrence\n    if (preg_match('`^RRULE:(.*)`m', $content, $m)) {\n      $rules = (object) array();\n      $rule = trim($m[1]);\n\n      $rule = explode(';', $rule);\n      foreach ($rule as $r) {\n        list($key, $value) = explode('=', $r);\n        $rules->{strtolower($key)} = $value;\n      }","metadata":{"source":"src/App/ICalEvent.php"}}],["21",{"pageContent":"$rule = explode(';', $rule);\n      foreach ($rule as $r) {\n        list($key, $value) = explode('=', $r);\n        $rules->{strtolower($key)} = $value;\n      }\n\n      if (isset($rules->until)) {\n        $rules->until = date('Y-m-d H:i:s', strtotime($rules->until));\n      }\n      if (isset($rules->count)) {\n        $rules->count = intval($rules->count);\n      }\n      if (isset($rules->interval)) {\n        $rules->interval = intval($rules->interval);\n      }\n      if (isset($rules->byday)) {\n        $rules->byday = explode(',', $rules->byday);\n      }\n\n      // Avoid infinite recurrences\n      if (!isset($rules->until) && !isset($rules->count)) {\n        $rules->count = 500;\n      }\n\n      $this->recurrence = $rules;\n    }\n\n\n    // Location\n    if (preg_match('`^LOCATION:(.*)$`m', $content, $m))\n      $this->location = trim($m[1]);\n\n    // Status\n    if (preg_match('`^STATUS:(.*)$`m', $content, $m))\n      $this->status = trim($m[1]);","metadata":{"source":"src/App/ICalEvent.php"}}],["22",{"pageContent":"// Status\n    if (preg_match('`^STATUS:(.*)$`m', $content, $m))\n      $this->status = trim($m[1]);\n\n\n    // Created\n    if (preg_match('`^CREATED:(.*)`m', $content, $m))\n      $this->created = date('Y-m-d H:i:s', strtotime(trim($m[1])));\n\n    // Updated\n    if (preg_match('`^LAST-MODIFIED:(.*)`m', $content, $m))\n      $this->updated = date('Y-m-d H:i:s', strtotime(trim($m[1])));\n\n    return $this;\n  }\n\n  public function isRecurrent()\n  {\n    return !empty($this->recurrence);\n  }\n\n  protected function _isExdate($date)\n  {\n    if ((string) (int) $date != $date) {\n      $date = strtotime($date);\n    }\n    $date = date('Y-m-d', $date);\n\n    return in_array($date, $this->exdate);\n  }\n\n  protected function _calculateOccurrences()\n  {\n    $occurrences = array($this->_timeStart);\n\n    if ($this->isRecurrent()) {\n      $freq  = $this->recurrence->freq;\n      $count = isset($this->recurrence->count) ? $this->recurrence->count : null;\n      $until = isset($this->recurrence->until) ? strtotime($this->recurrence->until) : null;","metadata":{"source":"src/App/ICalEvent.php"}}],["23",{"pageContent":"$callbacks = array(\n        'YEARLY'  => '_nextYearlyOccurrence',\n        'MONTHLY' => '_nextMonthlyOccurrence',\n        'WEEKLY'  => '_nextWeeklyOccurrence',\n      );\n      $callback = $callbacks[$freq];\n\n      $offset = $this->_timeStart;\n      $continue = $until ? ($offset < $until) : ($count > 1);\n      while ($continue) {\n        $occurrence = $this->{$callback}($offset);\n\n        if (!$this->_isExdate($occurrence)) {\n          $occurrences[] = $occurrence;\n          $count--;\n        }\n\n        $offset = $occurrence;\n        $continue = $until ? ($offset < $until) : ($count > 1);\n      }\n    }\n\n    if ($this->_isExdate($occurrences[0])) {\n      unset($occurrences[0]);\n      $occurrences = array_values($occurrences);\n    }\n\n    // Convertion to object\n    $event = $this;\n    $occurrences = array_map(\n      function ($o) use ($event) {\n        return new ICalOccurrence($event, $o);\n      },\n      $occurrences\n    );\n\n    return $occurrences;\n  }","metadata":{"source":"src/App/ICalEvent.php"}}],["24",{"pageContent":"return $occurrences;\n  }\n\n  protected function _nextYearlyOccurrence($offset)\n  {\n    $interval = isset($this->recurrence->interval)\n      ? $this->recurrence->interval\n      : 1;\n\n    return strtotime(\"+{$interval} year\", $offset);\n  }\n\n  protected function _nextMonthlyOccurrence($offset)\n  {\n    $interval = isset($this->recurrence->interval)\n      ? $this->recurrence->interval\n      : 1;\n\n    $bymonthday = isset($this->recurrence->bymonthdays)\n      ? explode(',', $this->recurrence->bymonthday)\n      : array(date('d', $offset));\n\n    $start = strtotime(date('Y-m-01 H:i:s', $offset));\n\n    $dates = array();\n    foreach ($bymonthday as $day) {\n      // this month\n      $dates[] = strtotime(($day - 1) . ' day', $start);\n\n      // next 'interval' month\n      $tmp  = strtotime(\"+{$interval} month\", $start);\n      $time = strtotime(($day - 1) . ' day', $tmp);\n      if ((string) (int) date('d', $time) == (int) $day) {\n        $dates[] = $time;\n      }","metadata":{"source":"src/App/ICalEvent.php"}}],["25",{"pageContent":"// 2x 'interval' month\n      $interval *= 2;\n      $tmp  = strtotime(\"+{$interval} month\", $start);\n      $time = strtotime(($day - 1) . ' day', $tmp);\n      if ((string) (int) date('d', $time) === (int) $day) {\n        $dates[] = $time;\n      }\n    }\n    sort($dates);\n\n    foreach ($dates as $date) {\n      if ($date > $offset) {\n        return $date;\n      }\n    }\n  }\n\n  protected function _nextWeeklyOccurrence($offset)\n  {\n    $interval = isset($this->recurrence->interval)\n      ? $this->recurrence->interval\n      : 1;\n\n    $byday = isset($this->recurrence->byday)\n      ? $this->recurrence->byday\n      : array(substr(strtoupper(date('D', $offset)), 0, 2));\n\n    $start = date('l', $offset) !== 'Monday'\n    ? strtotime('last monday', $offset)\n      : $offset;\n\n    $daysname = array(\n      'MO' => 'monday',\n      'TU' => 'tuesday',\n      'WE' => 'wednesday',\n      'TH' => 'thursday',\n      'FR' => 'friday',\n      'SA' => 'saturday',\n      'SU' => 'sunday',\n    );","metadata":{"source":"src/App/ICalEvent.php"}}],["26",{"pageContent":"$dates = array();\n    foreach ($byday as $day) {\n      $dayname = $daysname[$day];\n\n      // this week\n      $dates[] = strtotime($dayname, $start);\n\n      // next 'interval' week\n      $tmp  = strtotime(\"+{$interval} week\", $start);\n      $time = strtotime($dayname, $tmp);\n      $dates[] = $time;\n    }\n    sort($dates);\n\n    foreach ($dates as $date) {\n      if ($date > $offset) {\n        return $date;\n      }\n    }\n  }\n}","metadata":{"source":"src/App/ICalEvent.php"}}],["27",{"pageContent":"<?php\n\nnamespace Src\\App;\n\nclass ICalOccurrence\n{\n\n  /**\n   * @var ICalEvent\n   */\n  protected $_event;\n\n  /**\n   * @var integer\n   */\n  protected $_timestamp;\n\n\n  public function __construct(ICalEvent $event, $timestamp)\n  {\n    $this->_event     = $event;\n    $this->_timestamp = $timestamp;\n  }\n\n  public function __toString()\n  {\n    return (string) $this->_timestamp;\n  }\n\n\n  public function format($format = 'U')\n  {\n    return date($format, $this->_timestamp);\n  }\n\n  public function duration($format = 'U')\n  {\n    return date($format, $this->_event->duration());\n  }\n}","metadata":{"source":"src/App/ICalOccurrence.php"}}],["28",{"pageContent":"<?php \n\nnamespace Src\\Core;\n\nclass Container {\n\n    static $stack = [];\n\n    public static function add($label, $item) {\n        self::$stack[$label] = $item;\n    }\n\n    public static function get($label) {\n        if (!array_key_exists($label, static::$stack)) {\n            throw new \\Exception(\"No {$label} is founded\");\n        }\n        return self::$stack[$label];\n    }\n\n}","metadata":{"source":"src/Core/Container.php"}}],["29",{"pageContent":"<?php\n\nnamespace Src\\Core;\n\nclass ExceptionHandler\n{\n\n    private $response;\n\n    public function __construct(Response $response)\n    {\n        $this->response = $response;\n        set_exception_handler([$this, 'fire']);\n    }\n\n    public function fire($exception) \n    {\n        $exceptionMethod = 'handler' . get_class($exception);\n        if(method_exists($this, $exceptionMethod)) {\n            return $this->{$exceptionMethod}($exception);\n        }\n        return $this->handlerDefault($exception);\n    }\n    \n    public function handlerDefault($exception) {\n        return $this->response->sendError($exception->getMessage(), 500);\n    }\n\n    public function handlerNotFoundException($exception) {\n        return $this->response->sendError('Url not found', 404);\n    }\n}","metadata":{"source":"src/Core/ExceptionHandler.php"}}],["30",{"pageContent":"<?php\n\nnamespace Src\\Core\\Exceptions;\n\nclass NotFoundException extends \\Exception {\n    \n}","metadata":{"source":"src/Core/Exceptions/NotFoundException.php"}}],["31",{"pageContent":"<?php\n\nnamespace Src\\Core;\n\nclass Request \n{\n\n    public static function uri() {\n        return trim($_SERVER[\"REQUEST_URI\"]);\n    }\n\n    public static function method() {\n        return $_SERVER['REQUEST_METHOD'];\n    }\n\n    public static function getContent() {\n        return file_get_contents('php://input');\n    }\n\n}","metadata":{"source":"src/Core/Request.php"}}],["32",{"pageContent":"<?php\n\nnamespace Src\\Core;\n\nclass Response {\n\n    private $status = 200;\n    private $message;\n\n    public function status($status) {\n        $this->status = $status;\n    }\n\n    public function message($message) {\n        $this->message = $message;\n    }\n\n    public function sendError($error, $status) {\n        $this->message(['error' => $error]);\n        $this->status($status);\n        $this->send();\n    }\n\n    public function sendMessage($message) {\n        $this->message($message);\n        $this->send();\n    }\n\n    public function sendEmpty($status) {\n        http_response_code($status);\n        die;\n    }","metadata":{"source":"src/Core/Response.php"}}],["33",{"pageContent":"public function sendEmpty($status) {\n        http_response_code($status);\n        die;\n    }\n\n    public function send() {\n        header('Content-Type: application/json');\n        header(\"Access-Control-Allow-Origin: *\");\n        header(\"Access-Control-Allow-Credentials: true\");\n        header(\"Access-Control-Allow-Headers: X-Requested-With, Content-Type, Origin, Cache-Control, Pragma, Authorization, Accept, Accept-Encoding\");\n        header(\"Access-Control-Allow-Methods: PUT, POST, GET, OPTIONS, DELETE\");\n        http_response_code($this->status);\n        echo json_encode($this->message);\n        die;\n    }\n\n}","metadata":{"source":"src/Core/Response.php"}}],["34",{"pageContent":"<?php\n\nnamespace Src\\Core;\n\nclass Route \n{\n    private $pattern;\n    private $method;\n    private $matches;\n    private $callback;\n\n    public function __construct($pattern, $callback, $method = 'GET')\n    {\n        $this->pattern = $pattern;\n        $this->callback = $callback;\n        $this->method = $method;\n    }\n\n    public function match()\n    {\n        if (\n            preg_match('#^' . $this->pattern . '/?$#', Request::uri(), $this->matches)\n            && Request::method() == strtoupper($this->method)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    public function run() {\n\n        if(is_array($this->callback)) {\n            return (new $this->callback[0])->{$this->callback[1]}(...array_slice($this->matches, 1));\n        }\n        return call_user_func_array($this->callback, array_slice($this->matches, 1));\n\n    }\n}","metadata":{"source":"src/Core/Route.php"}}],["35",{"pageContent":"<?php\n\nnamespace Src\\Core;\n\nuse Src\\Core\\Exceptions\\NotFoundException;\n\nclass Router {\n\n    private $routes = [];\n\n    public function add($route) {\n        $this->routes[] = $route;\n    }\n\n    public function get($pattern, $callback) {\n        $this->routes[] = new Route($pattern, $callback, 'GET');\n    }\n    public function post($pattern, $callback) {\n        $this->routes[] = new Route($pattern, $callback, 'POST');\n    }\n    public function put($pattern, $callback) {\n        $this->routes[] = new Route($pattern, $callback, 'PUT');\n    }\n    public function delete($pattern, $callback) {\n        $this->routes[] = new Route($pattern, $callback, 'DELETE');\n    }\n\n    public function run() {\n        foreach($this->routes as $route) {\n            if ($route->match()) {\n                $route->run();\n            }\n        }\n        throw new NotFoundException('URL not found');\n    }\n\n}","metadata":{"source":"src/Core/Router.php"}}],["36",{"pageContent":"{\n  \"functions\": {\n    \"api/index.php\": {\n      \"runtime\": \"vercel-php@0.3.1\"\n    }\n  },\n  \"rewrites\": [\n    { \"source\": \"/api/next-event\", \"destination\": \"/api/index.php\" },\n    { \"source\": \"/api/events-since/(.*)\", \"destination\": \"/api/index.php\" }\n  ],\n  \"headers\": [\n    {\n      \"source\": \"/(.*)\",\n      \"headers\": [\n        { \"key\": \"Access-Control-Allow-Credentials\", \"value\": \"true\" },\n        { \"key\": \"Access-Control-Allow-Origin\", \"value\": \"*\" },\n        {\n          \"key\": \"Access-Control-Allow-Methods\",\n          \"value\": \"GET,OPTIONS,PATCH,DELETE,POST,PUT\"\n        },\n        {\n          \"key\": \"Access-Control-Allow-Headers\",\n          \"value\": \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version\"\n        }\n      ]\n    }\n  ],","metadata":{"source":"vercel.json"}}],["37",{"pageContent":"\"env\": {\n    \"APP_ENV\": \"production\",\n    \"APP_DEBUG\": \"true\",\n    \"GOOGLE_CALENDAR_PUBLIC_URL\": \"https://calendar.google.com/calendar/ical/ra11ir3rci72jikuf2gt3h3144%40group.calendar.google.com/private-c629bc3f17bf5ccc9e9f808539c9a277/basic.ics\"\n  }\n}","metadata":{"source":"vercel.json"}}]]