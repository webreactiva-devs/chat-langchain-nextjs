[["0",{"pageContent":"---\ntitle: Configuration Reference\ni18nReady: true\ngithubURL: https://github.com/withastro/astro/blob/main/packages/astro/src/%40types/astro.ts\n---\n\nimport Since from '~/components/Since.astro'\nimport DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\nThe following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on [Configuring Astro](/en/guides/configuring-astro/).\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // your configuration options here...\n})\n```","metadata":{"source":"reference.md"}}],["1",{"pageContent":"Top-Level Options\n\n### root\n\n<p>\n\n**Type:** `string`<br />\n**CLI:** `--root`<br />\n**Default:** `\".\"` (current working directory)\n</p>\n\nYou should only provide this option if you run the `astro` CLI commands in a directory other than the project root directory. Usually, this option is provided via the CLI instead of the [Astro config file](/en/guides/configuring-astro/#supported-config-file-types), since Astro needs to know your project root before it can locate your config file.\n\nIf you provide a relative path (ex: `--root: './my-project'`) Astro will resolve it against your current working directory.\n\n#### Examples\n\n```js\n{\n  root: './my-project-directory'\n}\n```\n```bash\n$ astro build --root ./my-project-directory\n```\n\n\n### srcDir\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `\"./src\"`\n</p>\n\nSet the directory that Astro will read your site from.\n\nThe value can be either an absolute file system path or a path relative to the project root.\n\n```js\n{\n  srcDir: './www'\n}\n```","metadata":{"source":"reference.md"}}],["2",{"pageContent":"publicDir\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `\"./public\"`\n</p>\n\nSet the directory for your static assets. Files in this directory are served at `/` during dev and copied to your build directory during build. These files are always served or copied as-is, without transform or bundling.\n\nThe value can be either an absolute file system path or a path relative to the project root.\n\n```js\n{\n  publicDir: './my-custom-publicDir-directory'\n}\n```\n\n\n### outDir\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `\"./dist\"`\n</p>\n\nSet the directory that `astro build` writes your final build to.\n\nThe value can be either an absolute file system path or a path relative to the project root.\n\n```js\n{\n  outDir: './my-custom-build-directory'\n}\n```\n**See Also:**\n- build.server","metadata":{"source":"reference.md"}}],["3",{"pageContent":"site\n\n<p>\n\n**Type:** `string`\n</p>\n\nYour final, deployed URL. Astro uses this full URL to generate your sitemap and canonical URLs in your final build. It is strongly recommended that you set this configuration to get the most out of Astro.\n\n```js\n{\n  site: 'https://www.my-site.dev'\n}\n```\n\n\n### base\n\n<p>\n\n**Type:** `string`\n</p>\n\nThe base path to deploy to. Astro will use this path as the root for your pages and assets both in development and in production build.\n\nIn the example below, `astro dev` will start your server at `/docs`.\n\n```js\n{\n  base: '/docs'\n}\n```\n\nWhen using this option, all of your static asset imports and URLs should add the base as a prefix. You can access this value via `import.meta.env.BASE_URL`.\n\n```astro\n<a href=\"/docs/about/\">About</a>\n<img src=`${import.meta.env.BASE_URL}/image.png`>\n```","metadata":{"source":"reference.md"}}],["4",{"pageContent":"trailingSlash\n\n<p>\n\n**Type:** `'always' | 'never' | 'ignore'`<br />\n**Default:** `'ignore'`\n</p>\n\nSet the route matching behavior of the dev server. Choose from the following options:\n  - `'always'` - Only match URLs that include a trailing slash (ex: \"/foo/\")\n  - `'never'` - Never match URLs that include a trailing slash (ex: \"/foo\")\n  - `'ignore'` - Match URLs regardless of whether a trailing \"/\" exists\n\nUse this configuration option if your production host has strict handling of how trailing slashes work or do not work.\n\nYou can also set this if you prefer to be more strict yourself, so that URLs with or without trailing slashes won't work during development.\n\n```js\n{\n  // Example: Require a trailing slash during development\n  trailingSlash: 'always'\n}\n```\n**See Also:**\n- build.format","metadata":{"source":"reference.md"}}],["5",{"pageContent":"adapter\n\n<p>\n\n**Type:** `AstroIntegration`\n</p>\n\nDeploy to your favorite server, serverless, or edge host with build adapters. Import one of our first-party adapters for [Netlify](/en/guides/deploy/netlify/#adapter-for-ssredge), [Vercel](/en/guides/deploy/vercel/#adapter-for-ssr), and more to engage Astro SSR.\n\n[See our Server-side Rendering guide](/en/guides/server-side-rendering/) for more on SSR, and [our deployment guides](/en/guides/deploy/) for a complete list of hosts.\n\n```js\nimport netlify from '@astrojs/netlify/functions';\n{\n  // Example: Build for Netlify serverless deployment\n\t adapter: netlify(),\n}\n```\n**See Also:**\n- output","metadata":{"source":"reference.md"}}],["6",{"pageContent":"output\n\n<p>\n\n**Type:** `'static' | 'server'`<br />\n**Default:** `'static'`\n</p>\n\nSpecifies the output target for builds.\n\n- 'static' - Building a static site to be deploy to any static host.\n- 'server' - Building an app to be deployed to a host supporting SSR (server-side rendering).\n\n```js\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  output: 'static'\n})\n```\n**See Also:**\n- adapter","metadata":{"source":"reference.md"}}],["7",{"pageContent":"Build Options\n\n### build.format\n\n<p>\n\n**Type:** `('file' | 'directory')`<br />\n**Default:** `'directory'`\n</p>\n\nControl the output file format of each page.\n  - If 'file', Astro will generate an HTML file (ex: \"/foo.html\") for each page.\n  - If 'directory', Astro will generate a directory with a nested `index.html` file (ex: \"/foo/index.html\") for each page.\n\n```js\n{\n  build: {\n    // Example: Generate `page.html` instead of `page/index.html` during build.\n    format: 'file'\n  }\n}\n```\n\n#### Effect on Astro.url\nSetting `build.format` controls what `Astro.url` is set to during the build. When it is:\n- `directory` - The `Astro.url.pathname` will include a trailing slash to mimic folder behavior; ie `/foo/`.\n- `file` - The `Astro.url.pathname` will include `.html`; ie `/foo.html`.\n\nThis means that when you create relative URLs using `new URL('./relative', Astro.url)`, you will get consistent behavior between dev and build.","metadata":{"source":"reference.md"}}],["8",{"pageContent":"build.client\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `'./dist/client'`\n</p>\n\nControls the output directory of your client-side CSS and JavaScript when `output: 'server'` only.\n`outDir` controls where the code is built to.\n\nThis value is relative to the `outDir`.\n\n```js\n{\n  output: 'server',\n  build: {\n    client: './client'\n  }\n}\n```\n\n\n### build.server\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `'./dist/server'`\n</p>\n\nControls the output directory of server JavaScript when building to SSR.\n\nThis value is relative to the `outDir`.\n\n```js\n{\n  build: {\n    server: './server'\n  }\n}\n```\n\n\n### build.assets\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `'_astro'`<br />\n<Since v=\"2.0.0\" />\n</p>\n\nSpecifies the directory in the build output where Astro-generated assets (bundled JS and CSS for example) should live.\n\n```js\n{\n  build: {\n    assets: '_custom'\n  }\n}\n```\n**See Also:**\n- outDir","metadata":{"source":"reference.md"}}],["9",{"pageContent":"build.assetsPrefix\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `undefined`<br />\n<Since v=\"2.2.0\" />\n</p>\n\nSpecifies the prefix for Astro-generated asset links. This can be used if assets are served from a different domain than the current site.\n\nFor example, if this is set to `https://cdn.example.com`, assets will be fetched from `https://cdn.example.com/_astro/...` (regardless of the `base` option).\nYou would need to upload the files in `./dist/_astro/` to `https://cdn.example.com/_astro/` to serve the assets.\nThe process varies depending on how the third-party domain is hosted.\nTo rename the `_astro` path, specify a new directory in `build.assets`.\n\n```js\n{\n  build: {\n    assetsPrefix: 'https://cdn.example.com'\n  }\n}\n```","metadata":{"source":"reference.md"}}],["10",{"pageContent":"build.serverEntry\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `'entry.mjs'`\n</p>\n\nSpecifies the file name of the server entrypoint when building to SSR.\nThis entrypoint is usually dependent on which host you are deploying to and\nwill be set by your adapter for you.\n\nNote that it is recommended that this file ends with `.mjs` so that the runtime\ndetects that the file is a JavaScript module.\n\n```js\n{\n  build: {\n    serverEntry: 'main.mjs'\n  }\n}\n```","metadata":{"source":"reference.md"}}],["11",{"pageContent":"Server Options\n\nCustomize the Astro dev server, used by both `astro dev` and `astro preview`.\n\n```js\n{\n  server: { port: 1234, host: true}\n}\n```\n\nTo set different configuration based on the command run (\"dev\", \"preview\") a function can also be passed to this configuration option.\n\n```js\n{\n  // Example: Use the function syntax to customize based on command\n  server: (command) => ({ port: command === 'dev' ? 3000 : 4000 })\n}\n```\n\n### server.host\n\n<p>\n\n**Type:** `string | boolean`<br />\n**Default:** `false`<br />\n<Since v=\"0.24.0\" />\n</p>\n\nSet which network IP addresses the server should listen on (i.e. non-localhost IPs).\n- `false` - do not expose on a network IP address\n- `true` - listen on all addresses, including LAN and public addresses\n- `[custom-address]` - expose on a network IP address at `[custom-address]` (ex: `192.168.0.1`)","metadata":{"source":"reference.md"}}],["12",{"pageContent":"server.port\n\n<p>\n\n**Type:** `number`<br />\n**Default:** `3000`\n</p>\n\nSet which port the server should listen on.\n\nIf the given port is already in use, Astro will automatically try the next available port.\n\n```js\n{\n  server: { port: 8080 }\n}\n```\n\n\n### server.headers\n\n<p>\n\n**Type:** `OutgoingHttpHeaders`<br />\n**Default:** `{}`<br />\n<Since v=\"1.7.0\" />\n</p>\n\nSet custom HTTP response headers to be sent in `astro dev` and `astro preview`.","metadata":{"source":"reference.md"}}],["13",{"pageContent":"Image options\n\n### image.service (Experimental)\n\n<p>\n\n**Type:** `'astro/assets/services/sharp' | 'astro/assets/services/squoosh' | string`<br />\n**Default:** `'astro/assets/services/squoosh'`<br />\n<Since v=\"2.1.0\" />\n</p>\n\nSet which image service is used for Astro’s experimental assets support.\n\nThe value should be a module specifier for the image service to use:\neither one of Astro’s two built-in services, or a third-party implementation.\n\n```js\n{\n  image: {\n    // Example: Enable the Sharp-based image service\n    service: 'astro/assets/services/sharp',\n  },\n}\n```","metadata":{"source":"reference.md"}}],["14",{"pageContent":"Markdown Options\n\n### markdown.drafts\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`\n</p>\n\nControl whether Markdown draft pages should be included in the build.\n\nA Markdown page is considered a draft if it includes `draft: true` in its frontmatter. Draft pages are always included & visible during development (`astro dev`) but by default they will not be included in your final build.\n\n```js\n{\n  markdown: {\n    // Example: Include all drafts in your final build\n    drafts: true,\n  }\n}\n```\n\n\n### markdown.shikiConfig\n\n<p>\n\n**Type:** `Partial<ShikiConfig>`\n</p>\n\nShiki configuration options. See [the Markdown configuration docs](/en/guides/markdown-content/#shiki-configuration) for usage.","metadata":{"source":"reference.md"}}],["15",{"pageContent":"markdown.shikiConfig\n\n<p>\n\n**Type:** `Partial<ShikiConfig>`\n</p>\n\nShiki configuration options. See [the Markdown configuration docs](/en/guides/markdown-content/#shiki-configuration) for usage.\n\n\n### markdown.syntaxHighlight\n\n<p>\n\n**Type:** `'shiki' | 'prism' | false`<br />\n**Default:** `shiki`\n</p>\n\nWhich syntax highlighter to use, if any.\n- `shiki` - use the [Shiki](https://github.com/shikijs/shiki) highlighter\n- `prism` - use the [Prism](https://prismjs.com/) highlighter\n- `false` - do not apply syntax highlighting.\n\n```js\n{\n  markdown: {\n    // Example: Switch to use prism for syntax highlighting in Markdown\n    syntaxHighlight: 'prism',\n  }\n}\n```\n\n\n### markdown.remarkPlugins\n\n<p>\n\n**Type:** `RemarkPlugins`\n</p>\n\nPass [remark plugins](https://github.com/remarkjs/remark) to customize how your Markdown is built. You can import and apply the plugin function (recommended), or pass the plugin name as a string.\n\n```js\nimport remarkToc from 'remark-toc';\n{\n  markdown: {\n    remarkPlugins: [remarkToc]\n  }\n}\n```","metadata":{"source":"reference.md"}}],["16",{"pageContent":"markdown.rehypePlugins\n\n<p>\n\n**Type:** `RehypePlugins`\n</p>\n\nPass [rehype plugins](https://github.com/remarkjs/remark-rehype) to customize how your Markdown's output HTML is processed. You can import and apply the plugin function (recommended), or pass the plugin name as a string.\n\n```js\nimport rehypeMinifyHtml from 'rehype-minify';\n{\n  markdown: {\n    rehypePlugins: [rehypeMinifyHtml]\n  }\n}\n```\n\n\n### markdown.gfm\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v=\"2.0.0\" />\n</p>\n\nAstro uses [GitHub-flavored Markdown](https://github.com/remarkjs/remark-gfm) by default. To disable this, set the `gfm` flag to `false`:\n\n```js\n{\n  markdown: {\n    gfm: false,\n  }\n}\n```\n\n\n### markdown.smartypants\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v=\"2.0.0\" />\n</p>\n\nAstro uses the [SmartyPants formatter](https://daringfireball.net/projects/smartypants/) by default. To disable this, set the `smartypants` flag to `false`:\n\n```js\n{\n  markdown: {\n    smartypants: false,\n  }\n}\n```","metadata":{"source":"reference.md"}}],["17",{"pageContent":"markdown.remarkRehype\n\n<p>\n\n**Type:** `RemarkRehype`\n</p>\n\nPass options to [remark-rehype](https://github.com/remarkjs/remark-rehype#api).\n\n```js\n{\n  markdown: {\n    // Example: Translate the footnotes text to another language, here are the default English values\n    remarkRehype: { footnoteLabel: \"Footnotes\", footnoteBackLabel: \"Back to content\"},\n  },\n};\n```","metadata":{"source":"reference.md"}}],["18",{"pageContent":"Integrations\n\nExtend Astro with custom integrations. Integrations are your one-stop-shop for adding framework support (like Solid.js), new features (like sitemaps), and new libraries (like Partytown and Turbolinks).\n\nRead our [Integrations Guide](/en/guides/integrations-guide/) for help getting started with Astro Integrations.\n\n```js\nimport react from '@astrojs/react';\nimport tailwind from '@astrojs/tailwind';\n{\n  // Example: Add React + Tailwind support to Astro\n  integrations: [react(), tailwind()]\n}\n```","metadata":{"source":"reference.md"}}],["19",{"pageContent":"Vite\n\nPass additional configuration options to Vite. Useful when Astro doesn't support some advanced configuration that you may need.\n\nView the full `vite` configuration object documentation on [vitejs.dev](https://vitejs.dev/config/).\n\n#### Examples\n\n```js\n{\n  vite: {\n    ssr: {\n      // Example: Force a broken package to skip SSR processing, if needed\n      external: ['broken-npm-package'],\n    }\n  }\n}\n```\n\n```js\n{\n  vite: {\n    // Example: Add custom vite plugins directly to your Astro project\n    plugins: [myPlugin()],\n  }\n}\n```\n\n## Legacy Flags\n\nTo help some users migrate between versions of Astro, we occasionally introduce `legacy` flags.\nThese flags allow you to opt in to some deprecated or otherwise outdated behavior of Astro\nin the latest version, so that you can continue to upgrade and take advantage of new Astro releases.","metadata":{"source":"reference.md"}}],["20",{"pageContent":"Experimental Flags\n\nAstro offers experimental flags to give users early access to new features.\nThese flags are not guaranteed to be stable.\n\n### experimental.assets\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v=\"2.1.0\" />\n</p>\n\nEnable experimental support for optimizing and resizing images. With this enabled, a new `astro:assets` module will be exposed.\n\nTo enable this feature, set `experimental.assets` to `true` in your Astro config:\n\n```js\n{\n\texperimental: {\n\t\tassets: true,\n\t},\n}","metadata":{"source":"reference.md"}}],["21",{"pageContent":"---\ntitle: Configuring Astro\ni18nReady: true\n---\n\nCustomize how Astro works by adding an `astro.config.mjs` file in your project. This is a common file in Astro projects, and all official example templates and themes ship with one by default.\n\n📚 Read Astro's [API configuration reference](/en/reference/configuration-reference/) for a full overview of all supported configuration options.","metadata":{"source":"config.md"}}],["22",{"pageContent":"The Astro Config File\n\nA valid Astro config file exports its configuration using the `default` export, using the recommended `defineConfig` helper:\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // your configuration options here...\n  // https://docs.astro.build/en/reference/configuration-reference/\n})\n```\n\nUsing `defineConfig()` is recommended for automatic type hints in your IDE, but it is also optional. An absolutely bare-minimum, valid configuration file would look like this:\n\n```js title=\"astro.config.mjs\"\n// Example: Bare minimum, empty configuration file\nexport default {}\n```","metadata":{"source":"config.md"}}],["23",{"pageContent":"Supported Config File Types\n\nAstro supports several file formats for its JavaScript configuration file: `astro.config.js`, `astro.config.mjs`, `astro.config.cjs` and `astro.config.ts`. We recommend using `.mjs` in most cases or `.ts` if you want to write TypeScript in your config file.\n\nTypeScript config file loading is handled using [`tsm`](https://github.com/lukeed/tsm) and will respect your project tsconfig options.\n## Config File Resolving\n\nAstro will automatically try to resolve a config file named `astro.config.mjs` inside project root. If no config file is found in your project root, Astro's default options will be used.\n\n```bash\n# Example: Reads your configuration from ./astro.config.mjs\nastro build\n```\n\nYou can explicitly set a config file to use with the `--config` CLI flag. This CLI flag always resolves relative to the current working directory where you ran the `astro` CLI command.\n\n```bash\n# Example: Reads your configuration from this file\nastro build --config my-config-file.js\n```","metadata":{"source":"config.md"}}],["24",{"pageContent":"Config IntelliSense\n\nAstro recommends using the `defineConfig()` helper in your configuration file. `defineConfig()` provides automatic IntelliSense in your IDE. Editors like VSCode are able to read Astro's TypeScript type definitions and provide automatic jsdoc type hints, even if your configuration file isn't written in TypeScript.\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // your configuration options here...\n  // https://docs.astro.build/en/reference/configuration-reference/\n})\n```\n\nYou can also provide type definitions manually to VSCode, using this JSDoc notation:\n\n```js\n// astro.config.mjs\nexport default /** @type {import('astro').AstroUserConfig} */ {\n  // your configuration options here...\n  // https://docs.astro.build/en/reference/configuration-reference/\n}\n```","metadata":{"source":"config.md"}}],["25",{"pageContent":"Referencing Relative Files\n\nIf you provide a relative path to `root` or the `--root` CLI flag, Astro will resolve it against the current working directory where you ran the `astro` CLI command.\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // Resolves to the \"./foo\" directory in your current working directory\n  root: 'foo'\n})\n```\n\nAstro will resolve all other relative file and directory strings as relative to the project root:\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // Resolves to the \"./foo\" directory in your current working directory\n  root: 'foo',\n  // Resolves to the \"./foo/public\" directory in your current working directory\n  publicDir: 'public',\n})","metadata":{"source":"config.md"}}],["26",{"pageContent":"To reference a file or directory relative to the configuration file, use `import.meta.url` (unless you are writing a common.js `astro.config.cjs` file).\n\n```js \"import.meta.url\"\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // Resolves to the \"./foo\" directory, relative to this config file\n  root: new URL(\"./foo\", import.meta.url),\n  // Resolves to the \"./public\" directory, relative to this config file\n  publicDir: new URL(\"./public\", import.meta.url),\n})\n```\n\n:::note\nVite-specific `import.meta` properties, like `import.meta.env` or `import.meta.glob`, are _not_ accessible from your configuration file. We recommend alternatives like [dotenv](https://github.com/motdotla/dotenv) or [fast-glob](https://github.com/mrmlnc/fast-glob) for these respective use cases.\n:::","metadata":{"source":"config.md"}}],["27",{"pageContent":"Customising Output Filenames\n\nFor code that Astro processes, like imported JavaScript or CSS files, you can customise output filenames using [`entryFileNames`](https://rollupjs.org/guide/en/#outputentryfilenames), [`chunkFileNames`](https://rollupjs.org/guide/en/#outputchunkfilenames), and [`assetFileNames`](https://rollupjs.org/guide/en/#outputassetfilenames) in a `vite.build.rollupOptions` entry in your `astro.config.*` file.\n\n```js ins={9-11}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  vite: {\n    build: {\n      rollupOptions: {\n        output: {\n          entryFileNames: 'entry.[hash].js',\n          chunkFileNames: 'chunks/chunk.[hash].js',\n          assetFileNames: 'assets/asset.[hash][extname]',\n        },\n      },\n    },\n  },\n})\n```\n\nThis can be helpful if you have scripts with names that might be impacted by ad blockers (e.g. `ads.js` or `google-tag-manager.js`).","metadata":{"source":"config.md"}}],["28",{"pageContent":"Environment Variables\nAstro evaluates configuration files before it loads your other files. As such, you can't use `import.meta.env` to access environment variables that were set in `.env` files. \n\nYou can use `process.env` in a configuration file to access other environment variables, like those [set by the CLI](/en/guides/environment-variables/#using-the-cli).\n\nYou can also use [Vite's `loadEnv` helper](https://main.vitejs.dev/config/#using-environment-variables-in-config) to manually load `.env` files.\n\n```js title=\"astro.config.mjs\"\nimport { loadEnv } from \"vite\";\nconst { SECRET_PASSWORD } = loadEnv(import.meta.env.MODE, process.cwd(), \"\");\n```\n\n## Configuration Reference\n\n📚 Read Astro's [API configuration reference](/en/reference/configuration-reference/) for a full overview of all supported configuration options.","metadata":{"source":"config.md"}}]]